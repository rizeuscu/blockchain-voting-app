{"$message_type":"diagnostic","message":"the trait bound `multiversx_sc::types::Address: multiversx_sc::types::ManagedVecItem` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"interactor/src/interactor_main.rs","byte_start":4531,"byte_end":4549,"line_start":146,"line_end":146,"column_start":59,"column_end":77,"is_primary":true,"text":[{"text":"        let allowed_voters = ManagedVec::from_single_item(bech32::decode(\"\"));","highlight_start":59,"highlight_end":77}],"label":"the trait `multiversx_sc::types::ManagedVecItem` is not implemented for `multiversx_sc::types::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"interactor/src/interactor_main.rs","byte_start":4502,"byte_end":4530,"line_start":146,"line_end":146,"column_start":30,"column_end":58,"is_primary":false,"text":[{"text":"        let allowed_voters = ManagedVec::from_single_item(bech32::decode(\"\"));","highlight_start":30,"highlight_end":58}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `multiversx_sc::types::ManagedVecItem`:\n  DebugHandle\n  EgldOrEsdtTokenIdentifier<M>\n  EllipticCurve<M>\n  EsdtTokenData<M>\n  EsdtTokenPayment<M>\n  EsdtTokenPaymentMultiValue<M>\n  EsdtTokenType\n  ManagedByteArray<M, N>\nand 18 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `multiversx_sc::types::ManagedVec::<M, T>::from_single_item`","code":null,"level":"note","spans":[{"file_name":"/Users/bogdan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-0.53.2/src/types/managed/wrapped/managed_vec.rs","byte_start":7067,"byte_end":7083,"line_start":247,"line_end":247,"column_start":12,"column_end":28,"is_primary":false,"text":[{"text":"    pub fn from_single_item(item: T) -> Self {","highlight_start":12,"highlight_end":28}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/bogdan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-0.53.2/src/types/managed/wrapped/managed_vec.rs","byte_start":2771,"byte_end":2785,"line_start":115,"line_end":115,"column_start":8,"column_end":22,"is_primary":true,"text":[{"text":"    T: ManagedVecItem,","highlight_start":8,"highlight_end":22}],"label":"required by this bound in `ManagedVec::<M, T>::from_single_item`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `multiversx_sc::types::Address: multiversx_sc::types::ManagedVecItem` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0minteractor/src/interactor_main.rs:146:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let allowed_voters = ManagedVec::from_single_item(bech32::decode(\"\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `multiversx_sc::types::ManagedVecItem` is not implemented for `multiversx_sc::types::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `multiversx_sc::types::ManagedVecItem`:\u001b[0m\n\u001b[0m              DebugHandle\u001b[0m\n\u001b[0m              EgldOrEsdtTokenIdentifier<M>\u001b[0m\n\u001b[0m              EllipticCurve<M>\u001b[0m\n\u001b[0m              EsdtTokenData<M>\u001b[0m\n\u001b[0m              EsdtTokenPayment<M>\u001b[0m\n\u001b[0m              EsdtTokenPaymentMultiValue<M>\u001b[0m\n\u001b[0m              EsdtTokenType\u001b[0m\n\u001b[0m              ManagedByteArray<M, N>\u001b[0m\n\u001b[0m            and 18 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `multiversx_sc::types::ManagedVec::<M, T>::from_single_item`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/bogdan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-0.53.2/src/types/managed/wrapped/managed_vec.rs:115:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: ManagedVecItem,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ManagedVec::<M, T>::from_single_item`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from_single_item(item: T) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `multiversx_sc::types::Address: multiversx_sc::types::ManagedVecItem` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"interactor/src/interactor_main.rs","byte_start":4502,"byte_end":4550,"line_start":146,"line_end":146,"column_start":30,"column_end":78,"is_primary":true,"text":[{"text":"        let allowed_voters = ManagedVec::from_single_item(bech32::decode(\"\"));","highlight_start":30,"highlight_end":78}],"label":"the trait `multiversx_sc::types::ManagedVecItem` is not implemented for `multiversx_sc::types::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `multiversx_sc::types::ManagedVecItem`:\n  DebugHandle\n  EgldOrEsdtTokenIdentifier<M>\n  EllipticCurve<M>\n  EsdtTokenData<M>\n  EsdtTokenPayment<M>\n  EsdtTokenPaymentMultiValue<M>\n  EsdtTokenType\n  ManagedByteArray<M, N>\nand 18 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `multiversx_sc::types::ManagedVec`","code":null,"level":"note","spans":[{"file_name":"/Users/bogdan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-0.53.2/src/types/managed/wrapped/managed_vec.rs","byte_start":1094,"byte_end":1104,"line_start":31,"line_end":31,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct ManagedVec<M, T>","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/bogdan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-0.53.2/src/types/managed/wrapped/managed_vec.rs","byte_start":1147,"byte_end":1161,"line_start":34,"line_end":34,"column_start":8,"column_end":22,"is_primary":true,"text":[{"text":"    T: ManagedVecItem,","highlight_start":8,"highlight_end":22}],"label":"required by this bound in `ManagedVec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `multiversx_sc::types::Address: multiversx_sc::types::ManagedVecItem` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0minteractor/src/interactor_main.rs:146:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let allowed_voters = ManagedVec::from_single_item(bech32::decode(\"\"));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `multiversx_sc::types::ManagedVecItem` is not implemented for `multiversx_sc::types::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `multiversx_sc::types::ManagedVecItem`:\u001b[0m\n\u001b[0m              DebugHandle\u001b[0m\n\u001b[0m              EgldOrEsdtTokenIdentifier<M>\u001b[0m\n\u001b[0m              EllipticCurve<M>\u001b[0m\n\u001b[0m              EsdtTokenData<M>\u001b[0m\n\u001b[0m              EsdtTokenPayment<M>\u001b[0m\n\u001b[0m              EsdtTokenPaymentMultiValue<M>\u001b[0m\n\u001b[0m              EsdtTokenType\u001b[0m\n\u001b[0m              ManagedByteArray<M, N>\u001b[0m\n\u001b[0m            and 18 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `multiversx_sc::types::ManagedVec`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/bogdan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-0.53.2/src/types/managed/wrapped/managed_vec.rs:34:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ManagedVec<M, T>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: ManagedVecItem,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ManagedVec`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `multiversx_sc::types::Address: multiversx_sc::types::ManagedVecItem` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"interactor/src/interactor_main.rs","byte_start":4576,"byte_end":4855,"line_start":148,"line_end":155,"column_start":24,"column_end":63,"is_primary":true,"text":[{"text":"        let response = self","highlight_start":24,"highlight_end":28},{"text":"            .interactor","highlight_start":1,"highlight_end":24},{"text":"            .tx()","highlight_start":1,"highlight_end":18},{"text":"            .from(&self.wallet_address)","highlight_start":1,"highlight_end":40},{"text":"            .to(self.state.current_address())","highlight_start":1,"highlight_end":46},{"text":"            .gas(30_000_000u64)","highlight_start":1,"highlight_end":32},{"text":"            .typed(proxy::BlockchainVotingAppProxy)","highlight_start":1,"highlight_end":52},{"text":"            .add_allowed_voters(election_code, allowed_voters)","highlight_start":1,"highlight_end":63}],"label":"the trait `multiversx_sc::types::ManagedVecItem` is not implemented for `multiversx_sc::types::Address`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `multiversx_sc::types::ManagedVecItem`:\n  DebugHandle\n  EgldOrEsdtTokenIdentifier<M>\n  EllipticCurve<M>\n  EsdtTokenData<M>\n  EsdtTokenPayment<M>\n  EsdtTokenPaymentMultiValue<M>\n  EsdtTokenType\n  ManagedByteArray<M, N>\nand 18 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `multiversx_sc::types::ManagedVec`","code":null,"level":"note","spans":[{"file_name":"/Users/bogdan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-0.53.2/src/types/managed/wrapped/managed_vec.rs","byte_start":1094,"byte_end":1104,"line_start":31,"line_end":31,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct ManagedVec<M, T>","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/bogdan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-0.53.2/src/types/managed/wrapped/managed_vec.rs","byte_start":1147,"byte_end":1161,"line_start":34,"line_end":34,"column_start":8,"column_end":22,"is_primary":true,"text":[{"text":"    T: ManagedVecItem,","highlight_start":8,"highlight_end":22}],"label":"required by this bound in `ManagedVec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `multiversx_sc::types::Address: multiversx_sc::types::ManagedVecItem` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0minteractor/src/interactor_main.rs:148:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let response = self\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .interactor\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .tx()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .from(&self.wallet_address)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .typed(proxy::BlockchainVotingAppProxy)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .add_allowed_voters(election_code, allowed_voters)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________________________________________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `multiversx_sc::types::ManagedVecItem` is not implemented for `multiversx_sc::types::Address`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `multiversx_sc::types::ManagedVecItem`:\u001b[0m\n\u001b[0m              DebugHandle\u001b[0m\n\u001b[0m              EgldOrEsdtTokenIdentifier<M>\u001b[0m\n\u001b[0m              EllipticCurve<M>\u001b[0m\n\u001b[0m              EsdtTokenData<M>\u001b[0m\n\u001b[0m              EsdtTokenPayment<M>\u001b[0m\n\u001b[0m              EsdtTokenPaymentMultiValue<M>\u001b[0m\n\u001b[0m              EsdtTokenType\u001b[0m\n\u001b[0m              ManagedByteArray<M, N>\u001b[0m\n\u001b[0m            and 18 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `multiversx_sc::types::ManagedVec`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/bogdan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-0.53.2/src/types/managed/wrapped/managed_vec.rs:34:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ManagedVec<M, T>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: ManagedVecItem,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ManagedVec`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` doesn't implement `std::fmt::Debug`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"interactor/src/interactor_main.rs","byte_start":6824,"byte_end":6840,"line_start":220,"line_end":220,"column_start":27,"column_end":43,"is_primary":true,"text":[{"text":"        println!(\"Result: {result_value:?}\");","highlight_start":27,"highlight_end":43}],"label":"`VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` cannot be formatted using `{:?}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/bogdan/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/macros.rs","byte_start":4429,"byte_end":4462,"line_start":143,"line_end":143,"column_start":28,"column_end":61,"is_primary":false,"text":[{"text":"        $crate::io::_print($crate::format_args_nl!($($arg)*));","highlight_start":28,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"interactor/src/interactor_main.rs","byte_start":6806,"byte_end":6842,"line_start":220,"line_end":220,"column_start":9,"column_end":45,"is_primary":false,"text":[{"text":"        println!(\"Result: {result_value:?}\");","highlight_start":9,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"println!","def_site_span":{"file_name":"/Users/bogdan/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/macros.rs","byte_start":4307,"byte_end":4327,"line_start":138,"line_end":138,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! println {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args_nl!","def_site_span":{"file_name":"/Users/bogdan/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":36483,"byte_end":36510,"line_start":1041,"line_end":1041,"column_start":5,"column_end":32,"is_primary":false,"text":[{"text":"    macro_rules! format_args_nl {","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::fmt::Debug` is not implemented for `VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>`, which is required by `std::vec::Vec<VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>>: std::fmt::Debug`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `#[derive(Debug)]` to `VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` or manually `impl std::fmt::Debug for VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the trait `std::fmt::Debug` is implemented for `std::vec::Vec<T, A>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider annotating `VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` with `#[derive(Debug)]`","code":null,"level":"help","spans":[{"file_name":"interactor/src/proxy.rs","byte_start":4712,"byte_end":4712,"line_start":172,"line_end":172,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub struct VoteMetadata<Api>","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"#[derive(Debug)]\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` doesn't implement `std::fmt::Debug`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0minteractor/src/interactor_main.rs:220:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m220\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        println!(\"Result: {result_value:?}\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` cannot be formatted using `{:?}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Debug` is not implemented for `VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>`, which is required by `std::vec::Vec<VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>>: std::fmt::Debug`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: add `#[derive(Debug)]` to `VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` or manually `impl std::fmt::Debug for VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Debug` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1m\u001b[35mstd::vec::Vec<T, A>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider annotating `VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` with `#[derive(Debug)]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0minteractor/src/proxy.rs:172:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ #[derive(Debug)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct VoteMetadata<Api>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`ElectionMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` doesn't implement `std::fmt::Debug`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"interactor/src/interactor_main.rs","byte_start":7245,"byte_end":7261,"line_start":235,"line_end":235,"column_start":27,"column_end":43,"is_primary":true,"text":[{"text":"        println!(\"Result: {result_value:?}\");","highlight_start":27,"highlight_end":43}],"label":"`ElectionMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` cannot be formatted using `{:?}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/bogdan/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/macros.rs","byte_start":4429,"byte_end":4462,"line_start":143,"line_end":143,"column_start":28,"column_end":61,"is_primary":false,"text":[{"text":"        $crate::io::_print($crate::format_args_nl!($($arg)*));","highlight_start":28,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"interactor/src/interactor_main.rs","byte_start":7227,"byte_end":7263,"line_start":235,"line_end":235,"column_start":9,"column_end":45,"is_primary":false,"text":[{"text":"        println!(\"Result: {result_value:?}\");","highlight_start":9,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"println!","def_site_span":{"file_name":"/Users/bogdan/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/macros.rs","byte_start":4307,"byte_end":4327,"line_start":138,"line_end":138,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! println {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args_nl!","def_site_span":{"file_name":"/Users/bogdan/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":36483,"byte_end":36510,"line_start":1041,"line_end":1041,"column_start":5,"column_end":32,"is_primary":false,"text":[{"text":"    macro_rules! format_args_nl {","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::fmt::Debug` is not implemented for `ElectionMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>`, which is required by `MultiValueVec<multiversx_sc::imports::MultiValue2<RustBigUint, ElectionMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>>>: std::fmt::Debug`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `#[derive(Debug)]` to `ElectionMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` or manually `impl std::fmt::Debug for ElectionMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the trait `std::fmt::Debug` is implemented for `MultiValueVec<T>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider annotating `ElectionMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` with `#[derive(Debug)]`","code":null,"level":"help","spans":[{"file_name":"interactor/src/proxy.rs","byte_start":4922,"byte_end":4922,"line_start":182,"line_end":182,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub struct ElectionMetadata<Api>","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"#[derive(Debug)]\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `ElectionMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` doesn't implement `std::fmt::Debug`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0minteractor/src/interactor_main.rs:235:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m235\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        println!(\"Result: {result_value:?}\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`ElectionMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` cannot be formatted using `{:?}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Debug` is not implemented for `ElectionMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>`, which is required by `MultiValueVec<multiversx_sc::imports::MultiValue2<RustBigUint, ElectionMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>>>: std::fmt::Debug`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: add `#[derive(Debug)]` to `ElectionMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` or manually `impl std::fmt::Debug for ElectionMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Debug` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1m\u001b[35mMultiValueVec<T>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider annotating `ElectionMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` with `#[derive(Debug)]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0minteractor/src/proxy.rs:182:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m182\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ #[derive(Debug)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m183\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct ElectionMetadata<Api>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` doesn't implement `std::fmt::Debug`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"interactor/src/interactor_main.rs","byte_start":7640,"byte_end":7656,"line_start":250,"line_end":250,"column_start":27,"column_end":43,"is_primary":true,"text":[{"text":"        println!(\"Result: {result_value:?}\");","highlight_start":27,"highlight_end":43}],"label":"`VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` cannot be formatted using `{:?}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/bogdan/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/macros.rs","byte_start":4429,"byte_end":4462,"line_start":143,"line_end":143,"column_start":28,"column_end":61,"is_primary":false,"text":[{"text":"        $crate::io::_print($crate::format_args_nl!($($arg)*));","highlight_start":28,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"interactor/src/interactor_main.rs","byte_start":7622,"byte_end":7658,"line_start":250,"line_end":250,"column_start":9,"column_end":45,"is_primary":false,"text":[{"text":"        println!(\"Result: {result_value:?}\");","highlight_start":9,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"println!","def_site_span":{"file_name":"/Users/bogdan/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/std/src/macros.rs","byte_start":4307,"byte_end":4327,"line_start":138,"line_end":138,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! println {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::format_args_nl!","def_site_span":{"file_name":"/Users/bogdan/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs","byte_start":36483,"byte_end":36510,"line_start":1041,"line_end":1041,"column_start":5,"column_end":32,"is_primary":false,"text":[{"text":"    macro_rules! format_args_nl {","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::fmt::Debug` is not implemented for `VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>`, which is required by `MultiValueVec<multiversx_sc::imports::MultiValue2<RustBigUint, std::vec::Vec<VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>>>>: std::fmt::Debug`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"add `#[derive(Debug)]` to `VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` or manually `impl std::fmt::Debug for VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the trait `std::fmt::Debug` is implemented for `MultiValueVec<T>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider annotating `VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` with `#[derive(Debug)]`","code":null,"level":"help","spans":[{"file_name":"interactor/src/proxy.rs","byte_start":4712,"byte_end":4712,"line_start":172,"line_end":172,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"pub struct VoteMetadata<Api>","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"#[derive(Debug)]\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` doesn't implement `std::fmt::Debug`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0minteractor/src/interactor_main.rs:250:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        println!(\"Result: {result_value:?}\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` cannot be formatted using `{:?}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Debug` is not implemented for `VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>`, which is required by `MultiValueVec<multiversx_sc::imports::MultiValue2<RustBigUint, std::vec::Vec<VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>>>>: std::fmt::Debug`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: add `#[derive(Debug)]` to `VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` or manually `impl std::fmt::Debug for VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Debug` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1m\u001b[35mMultiValueVec<T>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider annotating `VoteMetadata<VMHooksApi<multiversx_sc_snippets::multiversx_sc_scenario::api::impl_vh::static_api::StaticApiBackend>>` with `#[derive(Debug)]`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0minteractor/src/proxy.rs:172:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ #[derive(Debug)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct VoteMetadata<Api>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 6 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 6 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
